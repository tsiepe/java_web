#Wed May 28 22:47:02 CEST 2014
cmdhistory=[";; Switching to roman-numerals namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'roman-numerals)))" "(str 1997)" "(.charAt (str 1997) 0)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'roman-numerals)))" "(int \\"12\\")" "(int \\"2\\")" "(int \\\\2)" "(Integer/parseInt \\\\2)" "(Character/digit \\\\2 10)" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 21)" "(reverse \\"2014\\")" "(str (reverse \\"2014\\"))" "(join (reverse \\"2014\\"))" "(print-roman-numeral-for-arabic 21)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 21)" "(print-roman-numeral-for-arabic 2014)" "(print-roman-numeral-for-arabic 197)" "(print-roman-numeral-for-arabic 1993)" "(print-roman-numeral-for-arabic 1969)" "(print-roman-numeral-for-arabic 4000)" "(map-indexed arabic-to-roman-digit)" "(map-indexed (fn [idx itm] [idx itm]) arabic-to-roman-digit)" "(map-indexed (fn [idx itm] [idx itm val]) arabic-to-roman-digit)" "(map-indexed (fn [idx itm] [idx (val itm)]) arabic-to-roman-digit)" "(get (map-indexed (fn [idx itm] [idx (val itm)]) arabic-to-roman-digit) 6)" "(map-indexed (fn [idx itm] (idx (val itm))) arabic-to-roman-digit)" "(seq arabic-to-roman-digit)" "(get-in (map-indexed (fn [idx itm] [idx (val itm)]) arabic-to-roman-digit) 6)" "(find (map-indexed (fn [idx itm] [idx (val itm)]) arabic-to-roman-digit) 6)" "(map-indexed (fn [idx itm] [idx (val itm)]) arabic-to-roman-digit)" "( nth (map-indexed (fn [idx itm] [idx (val itm)]) arabic-to-roman-digit) 6)" "(map-indexed (fn [idx itm] (val itm)) arabic-to-roman-digit)" "(sorted-map (map-indexed (fn [idx itm] (val itm)) arabic-to-roman-digit))" "(sorted-map arabic-to-roman-digit)" "(sorted-map 'arabic-to-roman-digit)" "(sorted-map (map arabic-to-roman-digit))" "(sort arabic-to-roman-digit)" "(sorted-map (map-indexed (fn [idx itm] (val itm)) (sort arabic-to-roman-digit)))" "(map-indexed (fn [idx itm] (val itm)) (sort arabic-to-roman-digit))" ";; Switching to roman-numerals namespace" "(map-indexed arabic-to-roman-digit)" "(map-indexed (fn [idx itm] [idx itm]) arabic-to-roman-digit)" "(sorted-map arabic-to-roman-digit)" "(seq arabic-to-roman-digit)" "(vec arabic-to-roman-digit)" "(apply sorted-map arabic-to-roman-digit)" "(sort arabic-to-roman-digit)" "(sort \#(>) arabic-to-roman-digit)" "(sort-by \#(>) arabic-to-roman-digit)" "(sort-by first < arabic-to-roman-digit)" "(sort-by .compareTo first next arabic-to-roman-digit)" "(sort-by \#(.compareTo first next) arabic-to-roman-digit)" "(sort-by \#(.compareTo first) arabic-to-roman-digit)" "(sort-by first < arabic-to-roman-digit)" "(sort-by fn((name first) <) arabic-to-roman-digit)" "(sort-by \#((name first) <) arabic-to-roman-digit)" "(sort-by name first < arabic-to-roman-digit)" "(sort-by (name first <) arabic-to-roman-digit)" "(sort-by ((name first) <) arabic-to-roman-digit)" "(sort-by keys arabic-to-roman-digit)" "(map-indexed (fn [idx itm] [idx (key itm)]) arabic-to-roman-digit)" "(keys arabic-to-roman-digit)" "(sort (keys arabic-to-roman-digit))" "(sort-by < (keys arabic-to-roman-digit))" "(sort-by > (keys arabic-to-roman-digit))" "(sort-by \#(>) (keys arabic-to-roman-digit))" "(sort-by \#(> first next) (keys arabic-to-roman-digit))" "(sort (keys arabic-to-roman-digit))" "(sort (apply Integer/parseInt (keys arabic-to-roman-digit)))" "(sort (apply fn(Integer/parseInt) (keys arabic-to-roman-digit)))" "(sort (apply \#(Integer/parseInt) (keys arabic-to-roman-digit)))" "(sort (apply str (keys arabic-to-roman-digit)))" "(sort (apply int (keys arabic-to-roman-digit)))" "(sort (apply ints (keys arabic-to-roman-digit)))" "(iterate (keys arabic-to-roman-digit))" "(doall (keys arabic-to-roman-digit))" "(doall (name (keys arabic-to-roman-digit)))" ";; Switching to roman-numerals namespace" "(zipmap [1, 5, 10, 50, 100, 500, 1000] [I, V, X, L, C, D, M])" "(zipmap [1, 5, 10, 50, 100, 500, 1000] [\\\\I, \\\\V, \\\\X, \\\\L, \\\\C, \\\\D, \\\\M])" "(sorted-map {1 \\\\I, 5 \\\\V, 10 \\\\X, 50 \\\\L, 100 \\\\C, 500 \\\\D, 1000 \\\\M})" "(get (zipmap [1, 5, 10, 50, 100, 500, 1000] [\\\\I, \\\\V, \\\\X, \\\\L, \\\\C, \\\\D, \\\\M]) 50)" "(sort [50, 5, 1, 100, 500, 10, 1000])" "(get [50, 5, 1, 100, 500, 10, 1000] 2)" "(print-roman-numeral-for-arabic 2014)" "(translate-digit 5)" "(keep-indexed \#(if (\= %2 al-zifr) %1) arabics)" "(keep-indexed \#(if (\= %2 7) %1) arabics)" "(keep-indexed \#(if (\= %2 5) %1) arabics)" "(first (keep-indexed \#(if (\= %2 5) %1) arabics))" "(translate-digit 5)" "(get arabics (+ 5 2))" "(get arabics (+ 1 2)\\n     )" "(get arabic-to-roman-digit 10)" "(join (get arabic-to-roman-digit 10))" "(join (str (get arabic-to-roman-digit 10)))" "(translate-digit 5)" "(translate-digit 1\\n                 )" "(translate-digit 0)" "(translate-digit 2)" "(some \#(\= 102 %) '(101 102 103))" "(some \#(\= 2 %) arabics)" "(some \#(\= 1 %) arabics)" "(filter \#(< % 2) arabics)" "(filter \#(< % 7) arabics)" "(last \\n  (filter \#(< % 7) arabics))" "(translate-digit 2)" "(translate-digit 0)" "(translate-digit 1)" "(translate-digit 2)" "(translate-digit 3)" "(translate-digit 4)" "(translate-digit 5)" "(first '(5))" "(first (keep-indexed \#(if (\= %2 5) %1) arabics))" "(get arabics 2)" "(get arabics 3)" "(+ 1 2)" "(+ 1 1)" ";; Switching to roman-numerals namespace" "(use [roman-numerals])" "(use 'roman-numerals)" "(translate-digit 2)" "(refer 'roman-numerals)" "(translate-digit 2)" "(translate-digit 3)" "(translate-digit 4)" "(translate-digit 1)" "(first '(5))" "(some \#(\= 1 %) arabics)" "(first (keep-indexed \#(if (\= %2 1) %1) arabics))" "(first '(1))" "(get arabic-to-roman-digit 1)" "(repeat 1 (get arabic-to-roman-digit 1))" "(join (repeat 1 (get arabic-to-roman-digit 1)))" "(join (join (repeat 1 (get arabic-to-roman-digit 1))))" "(translate-digit 1)" "'al-zifr" "al-zifr" "(get al-zifr)" "(symbol? al-zifr)" "(translate-digit 1)" "(eval al-zifr)" "(translate-digit 1)" "(eval al-zifr)" "(read al-zifr)" "(translate-digit 1)" "(translate-digit 2)" "(translate-digit 3)" "(translate-digit 5)" "(translate-digit 4)" ";; Switching to roman-numerals namespace" "(translate-digit 4)" "(translate-digit 5)" "(translate-digit 6)" ";; Switching to roman-numerals namespace" "(translate-digit 6)" "(translate-digit 5)" "(translate-digit 4)" "(translate-digit 3)" "(translate-digit 2)" "(translate-digit 1)" "(translate-digit )" "(translate-digit 0)" ";; Switching to roman-numerals namespace" "(translate-digit 0)" "(translate-digit 1)" "(translate-digit 2\\n                 )" "(translate-digit 3)" "(translate-digit 4)" "(translate-digit 5)" "(translate-digit 6)" "(translate-digit 7)" "(translate-digit 8)" "(translate-digit 9)" "(translate-digit 10)" ";; Switching to roman-numerals namespace" "(translate-digit 10)" "(translate-digit 9)" ";; Switching to roman-numerals namespace" "(translate-digit 9)" "(translate-digit 10)" "(translate-digit 7)" "(translate-digit 6)" "(translate-digit 5)" "(translate-digit 4)" "(translate-digit 3)" "(translate-digit 2\\n                 )" "(translate-digit 1)" "(translate-digit 0)" "(arabic-to-roman-digit 2014)" "(print-roman-numeral-for-arabic 2014)" "(print-roman-numeral-for-arabic 2914)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 2014)" "(print-roman-numeral-for-arabic 2914)" "(print-roman-numeral-for-arabic 214)" "(print-roman-numeral-for-arabic 21)" "(print-roman-numeral-for-arabic 1969)" "(print-roman-numeral-for-arabic 0)" "(print-roman-numeral-for-arabic 1)" "(print-roman-numeral-for-arabic 144)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 10)" ";; Switching to roman-numerals namespace" "(print-roman-numeral-for-arabic 10)" "(print-roman-numeral-for-arabic 144)" "(print-roman-numeral-for-arabic 1969)" "(print-roman-numeral-for-arabic 2914)" "(print-roman-numeral-for-arabic 2014)"]
eclipse.preferences.version=1
